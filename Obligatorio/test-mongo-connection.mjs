import mongoose from 'mongoose';
import 'dotenv/config';

console.log('üîç Configuraci√≥n MongoDB:');
console.log('MONGO_ATLAS_USER:', process.env.MONGO_ATLAS_USER);
console.log('MONGO_ATLAS_PASS:', process.env.MONGO_ATLAS_PASS ? '***' : 'NO CONFIGURADO');
console.log('MONGO_ATLAS_URI:', process.env.MONGO_ATLAS_URI);

async function testMongoConnection() {
    try {
        console.log('\nüöÄ Iniciando prueba de conexi√≥n a MongoDB Atlas...');
        
        // Construir URI con variables de entorno
        const uri = process.env.MONGO_ATLAS_URI
            .replace('${MONGO_ATLAS_USER}', process.env.MONGO_ATLAS_USER)
            .replace('${MONGO_ATLAS_PASS}', process.env.MONGO_ATLAS_PASS);
        
        console.log('üì° URI final:', uri.replace(process.env.MONGO_ATLAS_PASS, '***'));
        
        // Intentar conexi√≥n
        console.log('‚è≥ Conectando...');
        await mongoose.connect(uri, {
            serverSelectionTimeoutMS: 10000, // 10 segundos timeout
        });
        
        console.log('‚úÖ ¬°Conexi√≥n exitosa a MongoDB Atlas!');
        
        // Hacer ping a la base de datos
        const admin = mongoose.connection.db.admin();
        const result = await admin.ping();
        console.log('üèì Ping resultado:', result);
        
        // Listar bases de datos disponibles
        const databases = await admin.listDatabases();
        console.log('üìã Bases de datos disponibles:');
        databases.databases.forEach(db => {
            console.log(`  - ${db.name} (${(db.sizeOnDisk / 1024 / 1024).toFixed(2)} MB)`);
        });
        
        // Probar operaci√≥n b√°sica
        const testCollection = mongoose.connection.db.collection('connection_test');
        await testCollection.insertOne({ 
            test: true, 
            timestamp: new Date(),
            message: 'Conexi√≥n funcionando correctamente' 
        });
        
        const testDoc = await testCollection.findOne({ test: true });
        console.log('üìù Documento de prueba creado:', testDoc);
        
        // Limpiar documento de prueba
        await testCollection.deleteOne({ _id: testDoc._id });
        console.log('üßπ Documento de prueba eliminado');
        
        console.log('\nüéâ ¬°Todas las pruebas pasaron! MongoDB Atlas est√° funcionando correctamente.');
        
    } catch (error) {
        console.error('\n‚ùå Error en la conexi√≥n:');
        console.error('Type:', error.name);
        console.error('Message:', error.message);
        
        if (error.name === 'MongoServerSelectionError') {
            console.error('\nüîß Posibles soluciones:');
            console.error('1. Verificar que la IP est√© en la whitelist de MongoDB Atlas');
            console.error('2. Verificar usuario y contrase√±a');
            console.error('3. Verificar que el cluster est√© activo');
            console.error('4. Verificar la URI de conexi√≥n');
        }
        
        if (error.name === 'MongoParseError') {
            console.error('\nüîß Error en la URI de conexi√≥n:');
            console.error('- Verificar formato de la URI');
            console.error('- Verificar caracteres especiales en usuario/contrase√±a');
        }
    } finally {
        await mongoose.connection.close();
        console.log('\nüîí Conexi√≥n cerrada');
        process.exit(0);
    }
}

// Ejecutar prueba
testMongoConnection();